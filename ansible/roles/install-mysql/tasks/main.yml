---
# tasks file for install-mysql
- name: get facts         # запись фактов о хостах в переменные для их использования
  ansible.builtin.set_fact:
    ip: "{{ ansible_facts.all_ipv4_addresses[0] }}"
- name: install mysql server  # установка сервера mySql
  become: true
  ansible.builtin.apt:
    name: mysql-server
    state: latest
    update_cache: yes
- name: copy config     # Копирование конфигурационных файлов
  become: true
  template:
    src: "{{ cluster_role }}/mysqld.cnf"
    dest: /etc/mysql/mysql.conf.d/
    force: true
- name: Restart MySql  # Перезапуск mysql
  become: true
  service:
    name: mysql
    state: restarted
- name: install pip3  # Установка pip для использования в следущей задаче
  become: true
  apt: name=python3-pip state=present 
- name: Install pymysql # Установка библиотеки phyton pymsql, она требуется для выполнения модулей community.mysql в следующих шагах
  become: true 
  pip:
    name: pymysql
    state: present
- name: create slave user # Создание пользователя для репликации на сервере master
  become: true
  community.mysql.mysql_user:
    name: "{{ mysql_slave_user }}" 
    host: '%'
    priv: "*.*:REPLICATION SLAVE"
    password: "{{ mysql_slave_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: cluster_role == 'master'
- name: get master status # Получение значений master status 
  become: true
  community.mysql.mysql_query:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: SHOW MASTER STATUS;
  delegate_to: "{{ mysql_master }}"
  when: cluster_role == 'slave'
  register: master_status
- name: set variable    # Запись значений фактов о хосте master в переменные для slave для того, чтобы избежать "нагромождения в строке sql-запроса в следующем шаге Slave Change Master"
  ansible.builtin.set_fact:
#    master_ip: "{{ hostvars['mysql1'].ip }}"                                                 
    master_log_file: "{{ master_status.query_result[0][0].File }}"
    master_postion:  "{{ master_status.query_result[0][0].Position }}"
  when: cluster_role == 'slave'  
- name: Slave Stop Slave  # Остановка SLAVE на хосте SLAVE
  become: true
  community.mysql.mysql_query:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: "STOP SLAVE;"
  when: cluster_role == 'slave'
- name: Slave Change Master # Изменение MASTER на хосте SLAVE
  become: true
  community.mysql.mysql_query:
    login_unix_socket: /var/run/mysqld/mysqld.sock
#    query: "CHANGE MASTER TO MASTER_HOST='{{ master_ip }}',MASTER_USER='{{ mysql_slave_user }}', MASTER_PASSWORD='{{ mysql_slave_password }}', MASTER_LOG_FILE='{{ master_log_file }}',MASTER_LOG_POS={{ master_postion }};"
    query: "CHANGE MASTER TO MASTER_HOST='{{ mysql_master_ip }}',MASTER_USER='{{ mysql_slave_user }}', MASTER_PASSWORD='{{ mysql_slave_password }}', MASTER_LOG_FILE='{{ master_log_file }}',MASTER_LOG_POS={{ master_postion }};"
  when: cluster_role == 'slave'
- name: START SLAVE # Запуск SLAVE
  become: true
  community.mysql.mysql_query:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: "START SLAVE;"
  when: cluster_role == 'slave'
- name: Create WP DataBase
  become: true
  community.mysql.mysql_db:
    name: "{{ mysql_wp_database }}" 
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: cluster_role == 'master'
- name: create wordpress user # Создание пользователя для репликации на сервере master
  become: true
  community.mysql.mysql_user:
    name: "{{ mysql_wp_user }}" 
    host: '%'
    priv: "{{ mysql_wp_database }}.*:ALL PRIVILEGES"
    password: "{{ mysql_wp_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: cluster_role == 'master'
 # CHANGE MASTER TO MASTER_HOST='10.0.0.15',MASTER_USER='slave_user', MASTER_PASSWORD='123IklA098', MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=157